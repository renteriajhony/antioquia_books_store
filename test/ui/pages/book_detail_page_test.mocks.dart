// Mocks generated by Mockito 5.4.4 from annotations
// in antioquia_bookstore/test/ui/pages/book_detail_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:antioquia_bookstore/models/book.dart' as _i5;
import 'package:antioquia_bookstore/models/http/book_detail_response.dart'
    as _i3;
import 'package:antioquia_bookstore/providers/books_provider.dart' as _i4;
import 'package:antioquia_bookstore/providers/main_provider.dart' as _i8;
import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeScrollController_0 extends _i1.SmartFake
    implements _i2.ScrollController {
  _FakeScrollController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBookDetailResponse_1 extends _i1.SmartFake
    implements _i3.BookDetailResponse {
  _FakeBookDetailResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BooksProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockBooksProvider extends _i1.Mock implements _i4.BooksProvider {
  MockBooksProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ScrollController get scrollController => (super.noSuchMethod(
        Invocation.getter(#scrollController),
        returnValue: _FakeScrollController_0(
          this,
          Invocation.getter(#scrollController),
        ),
      ) as _i2.ScrollController);

  @override
  List<_i5.Book> get books => (super.noSuchMethod(
        Invocation.getter(#books),
        returnValue: <_i5.Book>[],
      ) as List<_i5.Book>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasMorePages => (super.noSuchMethod(
        Invocation.getter(#hasMorePages),
        returnValue: false,
      ) as bool);

  @override
  int get totalItems => (super.noSuchMethod(
        Invocation.getter(#totalItems),
        returnValue: 0,
      ) as int);

  @override
  _i3.BookDetailResponse get bookDetailResponse => (super.noSuchMethod(
        Invocation.getter(#bookDetailResponse),
        returnValue: _FakeBookDetailResponse_1(
          this,
          Invocation.getter(#bookDetailResponse),
        ),
      ) as _i3.BookDetailResponse);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> getBooks({String? search = r'new'}) => (super.noSuchMethod(
        Invocation.method(
          #getBooks,
          [],
          {#search: search},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> getBookDetail(String? isbn13) => (super.noSuchMethod(
        Invocation.method(
          #getBookDetail,
          [isbn13],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MainProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockMainProvider extends _i1.Mock implements _i8.MainProvider {
  MockMainProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isDark => (super.noSuchMethod(
        Invocation.getter(#isDark),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void toggleTheme() => super.noSuchMethod(
        Invocation.method(
          #toggleTheme,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
